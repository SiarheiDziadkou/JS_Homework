// Сергей Дедков
/* Task_1
Написать функцию pow(x,n), которая возвращает x в степени n,
иначе говоря, умножает x на себя n раз и возвращает результат.
Запросить у пользователя x и n, а затем вывести результат pow(x,n).
В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.
*/

var x = +prompt('Какое число будем умножать?', 'x');
var n = +prompt('Во сколько раз будем умножать', 'n');
var result = 0;

function pow(x, n) {
    result = x;
    for (var i = 1; i < n; i++) {
        result *= x;
    }
    return result;
}
alert(pow(x, n));


/* Task_2
Написать функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
    sumTo(1) = 1
    sumTo(2) = 2 + 1 = 3
    sumTo(3) = 3 + 2 + 1 = 6
    sumTo(4) = 4 + 3 + 2 + 1 = 10
    sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
Сделать три варианта решения:
    - с использованием цикла
    - через рекурсию, sumTo(n) = n + sumTo(n-1) для n > 1
    - с использованием формулы для суммы арифметической прогрессии
Ответить на вопросы в комментариях:
    Какой вариант решения самый быстрый? Самый медленный? Почему?
    Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?
*/

// формула для суммы арифметической прогрессии - твой бро!!!
// (быстро, чётко, лаконично, не итераций, не вызывов)
function sumTo(n) {
    return n * (n + 1) / 2;
}
alert(sumTo(100));

// цикл - тоже твой бро, но не так хорош как формула
// (требуется больше операций чем с формулой )
function sumTo(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
}
alert(sumTo(100));

// рекурсия - не твой бро !!!
//(большое количество вызовов)
function sumTo(n) {
    if (n == 1) return 1;
    return n + sumTo(n - 1);
}
alert(sumTo(100));
// Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?
// Думаю что при стандартных условиях НЕТ. Потому что максимальный размер рекурсии ограничен.
// Но предполагаю, что в некоторых ситуация можно создать условия для этого (нестандартный движок, манипуляции с интерпритатором и т.д.)

/* Task_3
  N.05: домашнее задание TreeSum
  Разработать "чистую" функцию treeSum, которая получает массив, элементы которого могут быть числами или снова массивами, и так до любого уровня.
  Функция должна рассчитать и вернуть сумму всех числовых элементов массива со всех уровней.
  При написании функции не описывать каких-либо вложенных в неё функций.
  Проверить работу функции можно на следующем массиве (сумма 50):
    [5, 7,
        [4, [2], 8, [1, 3], 2],
        [9, []],
        1, 8
    ];
  Если работаем с числом - должна присутствовать проверка на то, что это число и оно корректно.
  Если с массивом - для определения массива метод isArray использовать запрещено.
  Необходимо нагуглить способ, как определить, что перед вами массив - с использованием только пройденных тем.
  Другие значения, помимо числа и массива, можно не обрабатывать.
  При решении также запрещено использование методов join/split и всего того, что еще не было пройдено.
  Функция должна быть чистой.
*/

var arr = [5, 7,
    [4, [2], 8, [1, 3], 2],
    [9, []],
    1, 8
];

function treeSum(array) {
    var sum = 0;
    for (var i = 0; i < array.length; i++) {
        if (isFinite(array[i])) {
            sum += +array[i];
        } else if (typeof array[i] === 'object' && array[i].length) {
            sum += treeSum(array[i]);
        } else { continue };
    }
    return sum;
}
alert(treeSum(arr));

